type Mutation {
    # Do not send Authorization header with this mustation!!!
    login(
        username: String!
        password: String!
    ): Authorization

    logout(
        token: String!
    ): Boolean

    storeUser(
        id: ID
        firstName: String
        lastName: String
        email: String
        password: String
        username: String
        enabled: Boolean
        roles: [String]
    ): User

    removeUser(id: ID!): User

    allowUserCustomerAccess(
        id: ID
        customerId: ID
    ): User

    revokeUserCustomerAccess(
        id: ID
        customerId: ID
    ): User

    updatePassword(
        id: ID!
        oldPassword: String!
        newPassword: String!
    ): Boolean

    adminUpdatePassword(
        id: ID!
        newPassword: String!
    ): Boolean

    requestPasswordReset(
        email: String!
    ): Boolean

    resetUserPassword(
        token: String!
        newPassword: String!
    ): Boolean

    storeWeights(
        weights: [WeightInput!]!
    ): [Weight] @deprecated(reason: "Will be removed")

    # Creates or updates organization
    storeOrganization(input: OrganizationInput!): Organization!
    # Removes organization
    removeOrganization(id: ID!): Organization!

    storeOrganizationSurvey(
        organizationId: ID!
        input: SurveyInput!
        languageCode: String
    ): OrganizationSurvey!

    enableAfterGame(
        surveyId: ID!
        version: Long!
        languageCode: String
    ): OrganizationSurvey!

    storeOrganizationSurveyParameters(
        # Survey id
        id: ID!
        # Survey version
        version: Long!
        # List of parameters that will be saved
        input: [SurveyParameterInput!]!
        # Language that user is currently editing
        languageCode: String
    ): OrganizationSurvey!

    storeOrganizationSurveyDiscussionQuestions(
        # Survey id
        id: ID!
        # Survey version
        version: Long!
        # The whole list of questions to save
        input: [SurveyDiscussionQuestionInput!]!
        # Language that user is currently editing
        languageCode: String
    ): OrganizationSurvey!

    storeOrganizationSurveyLogo(
        # Survey id
        id: ID!
        # Survey version
        version: Long!
        # Logo details. As a key use field value taken from getMediaUploadUrl mutation
        # Removes the logo if null
        details: MediaDetailsInput
    ): OrganizationSurvey!

    storeOrganizationSurveyMedia(
        # Survey id
        id: ID!
        # Survey version
        version: Long!
        # List of medias that will be saved
        input: [SurveyMediaInput!]!
        # Language that user is currently editing
        languageCode: String
    ): OrganizationSurvey!

    # Use for updating static texts that show up in the survey app
    storeOrganizationSurveyStaticText(
        # Survey id
        id: ID!
        # Survey version
        version: Long!
        # Static text to be saved
        input: SurveyStaticTextInput!
        # Language that user is currently editing
        languageCode: String
    ): OrganizationSurvey!

    # Stores survey catalysts and drivers with their names and descriptions.
    storeOrganizationSurveyCatalysts(
        # Survey id
        id: ID!
        # Survey version
        version: Long!
        # Static text to be saved
        input: [SurveyCatalystInput]!
        # Language that user is currently editing
        languageCode: String
    ) : OrganizationSurvey!

    # Stores survey catalysts questions
    storeOrganizationSurveyQuestions(
        # Survey id
        id: ID!
        # Survey version
        version: Long!
        # Static text to be saved
        input: [SurveyCatalystInput]!
        # Language that user is currently editing
        languageCode: String
    ) : OrganizationSurvey!

    storeOrganizationSurveyQuestionWeight(
        # Survey id
        id: ID!
        # Survey version
        version: Long!
        input: QuestionDriverWeightInput!
        # Language that user is currently editing
        languageCode: String
    ): OrganizationSurvey!

    removeOrganizationSurvey(
        # Survey id
        id: ID!
    ) : OrganizationSurvey!

    # invite respondents from invitations list and returns the list of all the respondents
    inviteRespondents(
        surveyId: ID!
        invitation: RespondentInvitationInput!
        # List of filters for filtering respondents for the output
        filters: [FilterInput!]
        # Should be used for selecting the language for the output
        languageCode: String
    ): [SurveyRespondent!]!

    removeRespondent(
        surveyId: ID!
        id: ID!
    ): SurveyRespondent!

    # Do not send Authorization header with this mustation!!!
    openQuestionnaire(id: ID!, invitationHash: String!): Authorization!

    consentQuestionnairePolicy(
        id: ID!
        consent: Boolean!
        languageCode: String): Questionnaire!

    answerOrSkipLikertQuestion(answer: LikertQuestionAnswerInput!, languageCode: String): Questionnaire
    rateLikertQuestion(rate: LikertQuestionRateInput!, languageCode: String): Questionnaire

    answerOrSkipCatalystQuestion(answer: CatalystOpenQuestionAnswerInput!, languageCode: String): Questionnaire

    answerParameter(answer: ParameterAnswerInput!, languageCode: String): Questionnaire

    # get presigned upload url
    getMediaUploadUrl(
        # Survey id
        id: ID!
        # media input
        input: MediaUploadInput!
    ): MediaUpload!

    commentOnAfterGameDiscussion(
        questionnaireId: ID!
        discussionId: ID!
        input: DiscussionCommentInput!
        languageCode: String
    ): AfterGameDiscussion!

    likeOnAfterGameComment(
        questionnaireId: ID!
        discussionId: ID!
        commentId: ID!
        # true for liking, false for unliking
        like: Boolean!
        languageCode: String
    ): AfterGameComment!

    storeCustomerDriverWeights(customerId: ID!, driverWeights: [DriverWeightInput!]!):Customer  @deprecated(reason: "Will be removed")

    storeSegment(languageCode: String!, segment: SegmentInput!): Segment @deprecated(reason: "Will be removed")

    storeSegmentQuestion(languageCode: String!, segmentId: ID!, question: QuestionInput!): Question  @deprecated(reason: "Will be removed")

    storeQuestion(languageCode: String!, question: QuestionInput!): Question  @deprecated(reason: "Will be removed")

    storeCustomerQuestion(languageCode: String!, customerId: ID!, question: QuestionInput!): Question  @deprecated(reason: "Will be removed")

    removeQuestion(id: ID!): Question  @deprecated(reason: "Will be removed")

    storeRespondentGroup(respondentGroup: RespondentGroupInput!): RespondentGroup @deprecated(reason: "Will be removed")

    removeRespondentGroup(id: ID!): RespondentGroup @deprecated(reason: "Will be removed")

    storeNamedPhrase(phrase: PhraseInput!): MultiLingualPhrase @deprecated(reason: "Will be removed")

    submitSurvey(
        respondentGroupId: ID!,
        respondent: RespondentInput!,
        answers: [AnswerInput!]!
    ): Respondent @deprecated(reason: "Will be removed")

    moveRespondentToRespondentGroup(
        respondentId: ID!
        respondentGroupId: ID!
    ): Respondent @deprecated(reason: "Will be removed")

    copyRespondentToRespondentGroup(
        respondentId: ID!
        respondentGroupId: ID!
    ): Respondent @deprecated(reason: "Will be removed")
}
