type Mutation {

    storeUser(
        id: ID
        firstName: String
        lastName: String
        email: String
        password: String
        username: String
        enabled: Boolean
        roles: [String]
    ): User

    allowUserCustomerAccess(
        id: ID
        customerId: ID
    ): User

    revokeUserCustomerAccess(
        id: ID
        customerId: ID
    ): User

    updatePassword(
        id: ID!
        oldPassword: String!
        newPassword: String!
    ): Boolean

    adminUpdatePassword(
        id: ID!
        newPassword: String!
    ): Boolean

    requestPasswordReset(
        email: String!
    ): Boolean

    resetUserPassword(
        token: String!
        newPassword: String!
    ): Boolean

    sendInvitation(
        invitation: InvitationInput
        recipients: [RecipientInput!]!
    ): Resultdetails

    storeWeights(
        weights: [WeightInput!]!
    ): [Weight]

    storeOrganization(input: OrganizationInput!): Organization!
    removeOrganization(id: ID!): Organization!

    # TODO: move version from survey input out
    storeOrganizationSurvey(
        organizationId: ID!
        input: SurveyInput!
        languageCode: String
    ): OrganizationSurvey!

    storeOrganizationSurveyParameters(
        # Survey id
        id: ID!
        # Survey version
        version: Long!
        # List of parameters
        input: [SurveyParameterInput!]!
        languageCode: String
    ): OrganizationSurvey!

    storeCustomerDriverWeights(customerId: ID!, driverWeights: [DriverWeightInput!]!):Customer

    storeSegment(languageCode: String!, segment: SegmentInput!): Segment

    storeSegmentQuestion(languageCode: String!, segmentId: ID!, question: QuestionInput!): Question

    storeQuestion(languageCode: String!, question: QuestionInput!): Question

    storeCustomerQuestion(languageCode: String!, customerId: ID!, question: QuestionInput!): Question

    removeQuestion(id: ID!): Question

    removeUser(id: ID!): User

    storeRespondentGroup(respondentGroup: RespondentGroupInput!): RespondentGroup @deprecated(reason: "Will be removed")

    removeRespondentGroup(id: ID!): RespondentGroup @deprecated(reason: "Will be removed")

    removeRespondent(id: ID!): Respondent

    storeNamedPhrase(phrase: PhraseInput!): MultiLingualPhrase

    submitSurvey(
        respondentGroupId: ID!,
        respondent: RespondentInput!,
        answers: [AnswerInput!]!
    ): Respondent @deprecated(reason: "Will be removed")

    moveRespondentToRespondentGroup(
        respondentId: ID!
        respondentGroupId: ID!
    ): Respondent @deprecated(reason: "Will be removed")

    copyRespondentToRespondentGroup(
        respondentId: ID!
        respondentGroupId: ID!
    ): Respondent @deprecated(reason: "Will be removed")

    login(
        username: String!
        password: String!
    ): Authorization

    logout(
        token: String!
    ): Boolean
}
