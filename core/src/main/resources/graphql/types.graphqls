scalar Date
scalar Long
scalar Url

# A json map containg translations data
# e.g.
# {
#   "landing_page": {
#     "header": "some title",
#     "some_text_displayed_somewhere": "some text",
#     "some_other_text": "some other text"
#   }
# }
scalar Translation

# A json map containing question driver weights
# Key value is a driver id whereas value is actual driver weight (float value)
scalar QuestionDriverWeights

enum QuestionSourceType {
    GENERIC
    SEGMENT
    ORGANISATION
}

# Currently supported parameter types
enum SurveyParameterType {
    # List / Combobox
    LIST
    # Multiple tree level list
    TREE
}

# The status of the respondent
enum SurveyRespondentState {
    # When respondent was created in the db
    INVITING
    # When email was sent to spam
    SPAM_EMAIL
    # When email was sent
    INVITED
    # When respondent opened questionnaire
    OPENED
    # When respondent answered first question
    ANSWERING
    # When respondend answered all questions
    ANSWERED
    # When there was some kind of error either in sending email or storing respondent
    ERROR
}

# This will be removed
type Customer {
    id: ID!
    name: String!
    description: String
    respondentGroups:[RespondentGroup] @deprecated(reason: "This will be remove")
    createdBy: User
    respondentGroupCount: Long @deprecated(reason: "This will be remove")
    respondentCount: Long
    isDefault: Boolean
    segment: Segment
    questions: [Question] @deprecated(reason: "Catalysts field should be used now")
    catalysts: [Catalyst]
}

type Organization {
    id: ID!
    name: String!
    description: String
    surveys: [OrganizationSurvey!]!
    surveyCount: Long!
    respondentCounts: RespondentCounters!
    owner: User
}

type RespondentCounters {
    invited: Long!
    answered: Long!
}

type SurveyTemplate {
    id: ID!
    version: Long!
    title: String!
    description: String
}

type OrganizationSurvey {
    # Unique id of the survey, autogenerated by the backend
    id: ID!
    # Current version of the survey, it increments on survey updates
    version: Long!
    title: String!
    description: String
    # Custom logo url
    # This field should be fetched in a seperate query
    logo: MediaDetails
    media: [SurveyMedia!]!
    catalysts: [Catalyst!]!
    staticTexts: [SurveyStaticTextGroup!]!
    # List of parameters
    parameters: [SurveyParameter!]!
    respondentCounts: RespondentCounters!
}

type SurveyMedia {
    id: ID!
    title: String!
    # Custom media details
    details: MediaDetails
}

type MediaDetails {
    # Custom media key
    # Use getImageUrl query for fetching the file with the key
    key: String
}

union SurveyParameter = SurveyListParameter | SurveyTreeParameter

type SurveyParameterItem {
    label: String!
    value: String!
}

type SurveyListParameter {
    type: SurveyParameterType!
    label: String!
    value: String!
    children: [SurveyParameterItem!]!
}

union SurveyParameterChild = SurveyParameterItem | SurveyTreeParameter

type SurveyTreeParameter {
    type: SurveyParameterType!
    label: String!
    value: String!
    children: [SurveyParameterChild!]!
}

type SurveyStaticText {
    # Static key for using in the frontend
    id: ID!
    # Display text for the admin, returns id when title is not provided
    title: String
    # Display description for the admin
    description: String
    # Text that will be displayed in the frontend when id is used
    text: String!
}

type SurveyStaticTextGroup {
    # Static key for using in the frontend
    id: ID!
    title: String
    description: String
    texts: [SurveyStaticText!]!
}

type LikertQuestion {
    id: ID!
    title: String!
    weights: QuestionDriverWeights!
}

type SurveyRespondent {
    id: ID!
    email: String!
    # List of <ID, String> values
    parameterAnswers: [RespondentParameterAnswer!]!
    state: SurveyRespondentState!
}

# Answers values for SurveyParameters
# This may be used for displaying the respondent answers in respondent list view in columns
type RespondentParameterAnswer {
    # The parameter id from the table header/filter
    # This is the root value (SurveyParameter.value) when TREE or LIST parameter is used
    # this should be used to match the proper column in the frontend
    id: ID!
    # Actual user answer value to display
    # when TREE or LIST parameter is used, it is the SurveyParameter.label value from checked child
    response: String
}

# type for the app
type Questionnaire {
    id: ID!
    staticTexts: Translation!
    catalysts: [QuestionnaireCatalyst!]!
    parameters: [QuestionnaireParameter!]!
    isFinished: Boolean!
    isAnswerable: Boolean!
}

# type for the app
type QuestionnaireCatalyst {
    id: ID!
    title: String!
    description: String
    questions: [QuestionnaireLikertQuestion!]!
    drivers: [QuestionnaireDriver!]!
    # The open question to be displayed by the end of the catalyst answers
    # now it may be null as we don't have it in the db yet.
    # and there is not support for editing/saving it in the admin
    # TODO: verify if it always must be displayed
    catalystQuestion: QuestionnaireOpenQuestion
}

# type for the app
type QuestionnaireDriver {
    id: ID!
    title: String!
    description: String
}

union QuestionnaireQuestion = QuestionnaireLikertQuestion | QuestionnaireOpenQuestion

interface IQuestionnaireQuestion {
    id: ID!
    title: String!
    answered: Boolean!
    skipped: Boolean!
}

type QuestionnaireLikertQuestion implements IQuestionnaireQuestion {
    id: ID!
    title: String!
    answered: Boolean!
    skipped: Boolean!
    response: Long
    # How important is this question to you?
    # May be null is not rated
    rate: Int
}

type QuestionnaireOpenQuestion implements IQuestionnaireQuestion{
    id: ID!
    title: String!
    answered: Boolean!
    skipped: Boolean!
    public: Boolean!
    response: String
}

union QuestionnaireParameter = QuestionnaireListParameter | QuestionnaireTreeParameter

type QuestionnaireParameterItem {
    label: String!
    value: String!
    selectable: Boolean!
    checked: Boolean! @deprecated(reason: "turns out it will be not used in the frontend")
}

type QuestionnaireListParameter {
    type: SurveyParameterType!
    label: String!
    value: String!
    children: [QuestionnaireParameterItem!]!
    answered: Boolean!
    # list of children.value that were answered
    # Currently will have 1 element if answered, as multi-serlect is not possible
    selectedAnswer: [ID!]
}

union QuestionnaireParameterChild = QuestionnaireParameterItem | QuestionnaireTreeParameter

type QuestionnaireTreeParameter {
    type: SurveyParameterType!
    label: String!
    value: String!
    selectable: Boolean!
    children: [QuestionnaireParameterChild!]!
    answered: Boolean!
    # list of children.value that were answered
    # Currently will have 1 element if answered, as multi-serlect is not possible
    # It will never be null for root, however children will not have this set
    selectedAnswer: [ID!]
}

type AfterGameCatalystStatistics {
    # Catalyst Id
    id: ID!
    # Catalyst title
    title: String
    # result for current respondent "You"
    respondentResult: Float
    # result for "Everyone" or selected parameter group on details page
    # may be null if group is not selected, or it's just "You"
    respondentGroupResult: Float
    drivers: [AfterGameDriverStatistics!]!
    questions: [AfterGameQuestionStatistics]!
    openQuestion: AfterGameOpenQuestion
}

type AfterGameDriverStatistics {
    # Driver title
    title: String
    # result for current respondent "You"
    respondentResult: Float
    # result for "Everyone" or selected parameter group on details page
    # may be null if group is not selected, or it's just "You"
    respondentGroupResult: Float
}

type AfterGameParameterStatistics {
    title: String!
    value: String
    result: Float
}

type AfterGameQuestionStatistics {
    title: String!
    result: Float
    # this is calculated rate of "How important is the question to me?"
    rate: Float
}

type AfterGameOpenQuestion {
    title: String
    answers: [String!]!
}

type MediaUpload {
    key: String!
    url: Url!
}







type Answer {
    id: ID!
    answerValue: Long
    question: Question
}

type RespondentOption {
    id: ID!
    title: String
    titlePhraseId: ID
}

type Respondent {
    id: ID!
    age: Long
    consent: Boolean
    country: String
    email: String
    experience: Long
    officeLocation: String
    gender: String
    name: String
    phone: String
    answers: [Answer]
    position: RespondentOption
    industry: RespondentOption
    segment: RespondentOption
    respondentGroup: RespondentGroup
    created: Date
    answerTime: Date
    state: String
    locale: String
}

# This is deprecated
type RespondentGroup {
    id: ID
    title: String
    description: String
    customer: Customer!
    survey: Survey!
    respondents: [Respondent]
    isDefault: Boolean
    questionGroups: [QuestionGroup] @deprecated(reason: "Catalysts field should be used now. Will be removed")
    defaultLocale: String
    respondentCount: Long
    catalysts: [Catalyst]
}

type Segment{
    id: ID!
    name: String!
    questions: [Question] @deprecated(reason: "Catalysts field should be used now. Will be remove")
    catalysts: [Catalyst!]!
    customers: [Customer!]! @deprecated(reason: "Use organizations")
    customerCount: Long!  @deprecated(reason: "Use organizationCount")
    organizations: [Organization!]!
    organizationCount: Long!
}

enum QuestionType {
    DEFAULT
    INVERTED
    DUAL
}

type AnswerOption {
    title: String
    titlePhraseId: ID
    index: Long
    value: Long
}

type Weight {
    id: ID
    questionGroupId: ID
    questionId: ID
    weight: Float
}

type Catalyst {
    id: ID!
    title: String!
    description: String
    titleId: Long @deprecated(reason: "This shouldn't be exposed. It is internal data. Will be removed")
    pdfName: String @deprecated(reason: "This was static text used for displayin it on the reports. Will be removed")
    questions: [LikertQuestion!]!
    # Catalyst/Theme open question displayed at the end
    catalystQuestion: String
    drivers: [Driver!]!
}

type Driver {
    id: ID!
    title: String!
    titleId: Long @deprecated(reason: "This shouldn't be exposed. it is internal data. Will be remove")
    description: String
    prescription: String
    weight: Float!
}

type Question {
    id: ID
    sourceType: QuestionSourceType!
    title: String
    titlePhraseId: ID
    answerOptions: [AnswerOption]
    questionType: QuestionType
    weights: [Weight]
    seq: Long
    created: Date
    modified: Date
    # The number of answers for the specific question. NOTICE!!! Use only if needed, may cause performance issues
    answerCount: Long
}

type QuestionGroup {
    id: ID!
    title: String
    titlePhraseId: ID
    description: String
    descriptionPhraseId: ID
    prescription: String
    prescriptionPhraseId: ID
    pdfName: String
    weight: Float
    questions: [Question]
    parent: QuestionGroup
    children: [QuestionGroup]
}

type Country {
    code: String
    name: String
}

type MultiLingualPhrase {
    id: ID!
    name: String
    text: String
}

type Language {
    code: String
    name: String
    nativeName: String
    prompt: String
}

type Survey {
    id: ID!
    title: String
    titlePhraseId: ID
    description: String
    descriptionPhraseId: ID
    questionGroups: [QuestionGroup] @deprecated(reason: "Catalysts field should be used now")
    catalysts: [Catalyst!]!
    respondentGroups: [RespondentGroup] @deprecated(reason: "Will be removed")
    respondent: Respondent
}

type InvitationDetails {
    id: ID!
    respondentGroupId: String!
    email: String!
    status: String
    sentTime: Date
    subject: String
    body: String
    hash:String
}

type Recipient {
    groupId: String!
    email: String!
}

type Resultdetails{
    sentCount: Long
    failedCount: Long
    recipients: [Recipient]
}

type MultiLingualPhrase{
    id: ID!
    name: String
    text:String
}
type Locale{
    validation_email: String
    validation_age: String
    validation_age_min: String
    validation_length: String
    validation_experience: String
    background_position_options_freelancer: String
    questionnaire_title: String
    questionnaire_start_linkText: String
    results_contactDescription: String
    background_industry_options_retail: String
    results_startOverLink: String
    privacy_policy_accept: String
    html_title_default: String
    statistics_totalGrowthIndex: String
    background_experience: String
    background_industry_options_financeInsurance: String
    background_segment_options_other: String
    background_industry: String
    html_title_finish: String
    validation_phoneNumber: String
    validation_number: String
    html_title_template: String
    question_answerOption_always: String
    background_gender: String
    background_segment_options_businessToBusiness: String
    validation_required: String
    background_segment: String
    background_industry_options_manufacturing: String
    questionnaire_start_title: String
    language_prompt: String
    background_location: String
    question_answerOption_rarely: String
    questionnaire_submitDescription: String
    questionnaire_submitLinkText: String
    background_email: String
    background_industry_options_manufacturingService: String
    background_age: String
    background_gender_options_male: String
    background_industry_options_publicServices: String
    background_name: String
    html_title_questionnaire: String
    ui_loading: String
    ui_next: String
    ui_back: String
    background_position_options_management: String
    background_position_options_employee: String
    statistics_result_all: String
    background_segment_options_businessToConsumer: String
    background_industry_options_consulting: String
    background_phone: String
    questionnaire_submitError: String
    background_required: String
    questionnaire_background_title: String
    background_industry_options_service: String
    background_industry_options_other: String
    html_title_background: String
    background_position: String
    background_gender_options_female: String
    privacy_policy_full: String
    statistics_result_filtered: String
    privacy_policy_consent_label: String
    background_industry_options_trading: String
    results_contactLink: String
    question_answerOption_never: String
    privacy_policy_read_more: String
    questionnaire_results_title: String
    questionnaire_submitting: String
    questionnaire_background_description: String
    questionnaire_description: String
    question_answerOption_sometimes: String
    question_answerOption_often: String
    privacy_policy_title: String
    background_position_options_other: String
    html_title_start: String
    questionnaire_results_description: String
    questionnaire_start_description: String
}

type Authorization {
    token: String!
}

type StatisticsQuestion {
    title: String
    max: Int
    min: Int
    avg: Float
    count: Long
}

type StatisticsQuestionsRank {
    top(size: Int = 5): [StatisticsQuestion]
    last(size: Int = 5): [StatisticsQuestion]
}

type StatisticsDevelopmentTrack {
    pdfName: String
    title: String
    index: Float @deprecated(reason: "result field should be used now")
    weighedIndex: Float @deprecated(reason: "weighedResult field should be used now")
    result: Float
    weighedResult: Float
    weight: Float
    weightModifier: Float
    importance: Float
}

type StatisticsCatalyst {
    pdfName: String
    title: String
    index: Float @deprecated(reason: "result field should be used now")
    weighedIndex: Float @deprecated(reason: "weighedResult field should be used now")
    result: Float
    weighedResult: Float
    weight: Float
    importance: Float
    developmentTrackIndices: [StatisticsDevelopmentTrack]
    questions: [StatisticsQuestion]
}

type Statistics {
    customerName: String
    companyName: String
    name: String
    totalGrowthIndex: Float
    surveyTitle: String
    respondentCount: Long
    catalysts: [StatisticsCatalyst]
    questionsRank: StatisticsQuestionsRank
}

type ComparativeStatistics {
    customers: [Statistics]
    respondentGroups: [Statistics]
    respondents: [Statistics]
}

type User {
    id: ID
    email: String
    username: String!
    firstName: String
    lastName: String
    enabled: Boolean
    roles: [Role]
    customers: [Customer] @deprecated(reason: "Use organizations. Customer type will be removed")
    organizations: [Organization!]!
}

type Role {
    name: String,
    title: String
}
type ImageUpload {
    hash: String!
    url: String!
}

type Validation {
    valid: Boolean!
    error: String
}


