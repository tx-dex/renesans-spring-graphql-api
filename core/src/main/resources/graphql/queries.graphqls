type Query {
    locale(languageCode: String): Locale @deprecated(reason: "Will be removed")

    survey(
        languageCode: String
        id: ID!
        customerId: ID
    ): Survey! @deprecated(reason: "Will be removed")

    respondentOptions(
        languageCode: String
        optionType: String!
    ): [RespondentOption] @deprecated(reason: "Will be removed")

    countries(languageCode: String): [Country] @deprecated(reason: "Will be removed")

    languages(languageCode: String): [Language] @deprecated(reason: "Will be removed")

    respondents(
        filters: Filters
    ): [Respondent] @deprecated(reason: "Will be removed")

    respondentGroups(
        languageCode: String
        customerId: ID
    ): [RespondentGroup] @deprecated(reason: "Will be removed")

    defaultRespondentGroupId: String @deprecated(reason: "Will be removed")
    defaultRespondentGroup(languageCode: String): RespondentGroup @deprecated(reason: "Will be removed")

    defaultSurveyId: String @deprecated(reason: "Will be removed")

    respondentGroup(
        languageCode: String
        id: ID!
    ): RespondentGroup @deprecated(reason: "Will be removed")

    phrases(
        languageCode: String
        names: [String]
        startsWith: String
    ): [MultiLingualPhrase] @deprecated(reason: "Will be removed")

    phrase(languageCode: String, name: String): MultiLingualPhrase @deprecated(reason: "Will be removed")

    invitations(respondentGroupId: ID!): [InvitationDetails] @deprecated(reason: "Will be removed")

    invitationsByEmail(
        respondentGroupId: ID!
        email: String!
        status: String
    ): [InvitationDetails] @deprecated(reason: "Will be removed")

    # Get list of organizations
    organizations: [Organization!]!
    # Get organization by id, throws if not found
    organization(id: ID!): Organization!
    # Get the survey by id, throws if not found
    organizationSurvey(id: ID!, languageCode: String): OrganizationSurvey!
    # Get list of survey templates
    surveyTemplates(languageCode: String): [SurveyTemplate!]!
    # Get list of respondents based on provided filters
    surveyRespondents(
        surveyId: ID!
        # List of filters for filtering respondents
        filters: [FilterInput!]
        # Should be used for selecting the language
        languageCode: String
    ): [SurveyRespondent!]!

    customer(
        languageCode: String
        id: ID!
    ): Customer! @deprecated(reason: "Will be removed")

    segment(
        languageCode: String
        id: ID!
    ): Segment @deprecated(reason: "Will be removed")

    segments: [Segment] @deprecated(reason: "Will be removed")

    question(
        languageCode: String
        id: ID!
    ): Question @deprecated(reason: "Will be removed")

    statistics(
        languageCode: String
        filters: Filters
    ): Statistics

    comparativeStatistics(
        languageCode: String
        filters: Filters
        customerIds: [ID]
        respondentGroupIds: [ID]
        respondentIds: [ID]
        edit: Boolean
    ): ComparativeStatistics

    imageUploadUrl(fileName: String!): ImageUpload

    # Used in the app
    questionnaire(
        id: ID!
        languageCode: String
    ): Questionnaire

    users: [User]
    user(id: ID): User
    roles: [Role]

    validateResetPasswordToken(
        token: String!
    ): Boolean

    validateEmail(value: String!, userId: ID): Validation
    validateUsername(value: String!, userId: ID): Validation
}
