type Query {
    locale(languageCode: String): Locale @deprecated(reason: "Will be removed")

    survey(
        languageCode: String
        id: ID!
        customerId: ID
    ): Survey! @deprecated(reason: "Will be removed")

    respondentOptions(
        languageCode: String
        optionType: String!
    ): [RespondentOption] @deprecated(reason: "Will be removed")

    countries(languageCode: String): [Country] @deprecated(reason: "Will be removed")

    languages(languageCode: String): [Language] @deprecated(reason: "Will be removed")

    respondents(
        filters: Filters
    ): [Respondent] @deprecated(reason: "Will be removed")

    respondentGroups(
        languageCode: String
        customerId: ID
    ): [RespondentGroup] @deprecated(reason: "Will be removed")

    defaultRespondentGroupId: String @deprecated(reason: "Will be removed")
    defaultRespondentGroup(languageCode: String): RespondentGroup @deprecated(reason: "Will be removed")

    defaultSurveyId: String @deprecated(reason: "Will be removed")

    respondentGroup(
        languageCode: String
        id: ID!
    ): RespondentGroup @deprecated(reason: "Will be removed")

    phrases(
        languageCode: String
        names: [String]
        startsWith: String
    ): [MultiLingualPhrase] @deprecated(reason: "Will be removed")

    phrase(languageCode: String, name: String): MultiLingualPhrase @deprecated(reason: "Will be removed")

    invitations(respondentGroupId: ID!): [InvitationDetails] @deprecated(reason: "Will be removed")

    invitationsByEmail(
        respondentGroupId: ID!
        email: String!
        status: String
    ): [InvitationDetails] @deprecated(reason: "Will be removed")

    # Get list of organizations
    organizations: [Organization!]!
    # Get organization by id, throws if not found
    organization(id: ID!): Organization!
    # Get the survey by id, throws if not found
    organizationSurvey(id: ID!, languageCode: String): OrganizationSurvey!
    # Get list of survey templates
    surveyTemplates(languageCode: String): [SurveyTemplate!]! @deprecated(reason: "will be removed")
    # Get list of respondents based on provided filters
    surveyRespondents(
        surveyId: ID!
        # List of filters for filtering respondents
        filters: [FilterInput!]
        # Should be used for selecting the language
        languageCode: String
    ): [SurveyRespondent!]!

    # Get survey statistcs based on provided filters
    surveyCatalystStatistics(
        surveyId: ID!
        catalystId: ID!
        # List of filters for filtering respondents
        filters: [FilterInput!]
        # Should be used for selecting the language
        languageCode: String
    ): SurveyCatalystStatistics!


    # Returns all catalysts/themes statistics for specific questionnaire
    afterGameOverviewCatalystsStatistics(
        questionnaireId: ID!
        languageCode: String
    ) : [AfterGameCatalystStatistics!]!

    # Returns catalyst/theme statistics for specific questionnaire, catalyst and parameter
    afterGameDetailedCatalystStatistics(
        questionnaireId: ID!
        catalystId: ID!
        # Selected parameter value
        parameterValue: ID
        languageCode: String
    ) : AfterGameCatalystStatistics!

    afterGameDetailedDriversStatistics(
        questionnaireId: ID!
        # Selected parameter value
        parameterValue: ID
        languageCode: String
    ) : [AfterGameDetailedDriverStatistics]!

    # Returns a collection of question statistics for specific questionnaire and parameter
    afterGameDetailedQuestionsStatistics(
        questionnaireId: ID!
        # Selected parameter value
        parameterValue: ID
        languageCode: String
    ) : [AfterGameQuestionStatistics]!

    # Returns a collection of question statistics for specific questionnaire and parameter
    afterGameDetailedOpenQuestionsStatistics(
        questionnaireId: ID!
        # Selected parameter value
        parameterValue: ID
        languageCode: String
    ) : [AfterGameOpenQuestionStatistics]!

    # Gets the list of selected by reposndent parameters and its overall rate
    afterGameRespondentParametersStatistics(
        questionnaireId: ID!
        catalystId: ID!
        languageCode: String
    ): [AfterGameParameterStatistics]!

    afterGameParameters(
        questionnaireId: ID!
        languageCode: String
    ): [SurveyParameter!]!

    afterGameOverviewParticipants(
        questionnaireId: ID!
    ): AfterGameOverviewParticipants

    afterGameDialogueTotalStatistics(
        questionnaireId: ID!
        languageCode: String
    ): DialogueTotalStatistics!

    afterGameDialogueTopics(
        questionnaireId: ID!
        languageCode: String
    ): [DialogueTopic]!

    afterGameDialogueTopic(
        questionnaireId: ID!
        topicId: ID!
        languageCode: String
    ): DialogueTopic!

    # get media public url by key, this should be used for logo
    mediaPublicUrl(key: String!, params: MediaParametersInput): Url!

    # get media signed url, should be used "on-click" when getting media.
    mediaSignedUrl(key: String!, params: MediaParametersInput): Url!

    # get media url by key
    getMediaUrl(key: String!, params: MediaParametersInput): Url @deprecated(reason: "Use mediaPublicUrl or mediaSignedUrl")
    # get media url by key
    getImageUrl(key: String!, params: MediaParametersInput): Url @deprecated(reason: "Use mediaPublicUrl or mediaSignedUrl")

    # Get all discussions (topics)
    afterGameDiscussions(
        questionnaireId: ID!
        # True for active, false for closes (inactive)
        active: Boolean!
        languageCode: String
    ): [AfterGameDiscussion!]!

    # Get one discussion (topic)
    afterGameDiscussion(
        questionnaireId: ID!
        discussionId: ID!
        languageCode: String
    ): AfterGameDiscussion!

    # Get two latest discussions (topics)
    afterGameOverviewLatestDiscussions(
        questionnaireId: ID!
        languageCode: String
    ): [AfterGameDiscussion!]!

    # Get VAI value for survey
    afterGameOverviewVisionAttainmentIndicator(
        questionnaireId: ID!
    ): AfterGameOverviewVisionAttainmentIndicatorOutput!



    customer(
        languageCode: String
        id: ID!
    ): Customer! @deprecated(reason: "Will be removed")

    segment(
        languageCode: String
        id: ID!
    ): Segment @deprecated(reason: "Will be removed")

    segments: [Segment] @deprecated(reason: "Will be removed")

    question(
        languageCode: String
        id: ID!
    ): Question @deprecated(reason: "Will be removed")

    statistics(
        languageCode: String
        filters: Filters
    ): Statistics

    comparativeStatistics(
        languageCode: String
        filters: Filters
        customerIds: [ID]
        respondentGroupIds: [ID]
        respondentIds: [ID]
        edit: Boolean
    ): ComparativeStatistics

    imageUploadUrl(fileName: String!): ImageUpload

    # Used in the app
    questionnaire(
        id: ID!
        languageCode: String
    ): Questionnaire

    users: [User]
    user(id: ID): User
    roles: [Role]

    validateResetPasswordToken(
        token: String!
    ): Boolean

    validateEmail(value: String!, userId: ID): Validation
    validateUsername(value: String!, userId: ID): Validation

    getDialogueTopicsAdmin(
        surveyId: ID!
        languageCode: String
    ): [DialogueTopic]
}
