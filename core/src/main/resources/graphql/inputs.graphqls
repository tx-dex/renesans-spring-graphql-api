input RecipientInput {
    respondentGroupId: String!
    email: String!
}

input SegmentInput {
    id: ID
    name: String!
    questions: [QuestionInput]
}

input QuestionInput {
    id: ID
    title: String!
    catalystId: ID
    weights: [WeightInput]
}

input InvitationInput {
    subject: String
    body: String
}

input WeightInput {
    questionId: Int
    questionGroupId: Int!
    weight: Float!
}

input DriverWeightInput {
    id: ID!
    weight: Float!
}

input RespondentGroupInput {
    id: ID
    title: String!
    description: String!
    customerId: ID!
    surveyId: String!
    questionGroupIds: [ID]!
    defaultLocale: String!
}

input PhraseInput {
    id: ID
    name: String
    text: String!
    languageCode: String
}

input OrganizationInput {
    # New organization will be created if id is not provided
    id: ID
    name: String
    description: String
}

input SurveyInput {
    # New survey will be created if id is not provided
    id: ID
    # Current version of the survey, required if id is provided
    version: Long
    title: String
    description: String
    # some properties of the survey that may be changed
    # This will update only properties if set!!!
    # Skip it for updating just the survey info like title or description
    properties: SurveyPropertiesInput
    templateId: ID @deprecated(reason: "will be removed")
    # Data is copied from this source survey if set
    sourceSurveyId: ID
}

input SurveyPropertiesInput {
    hideCatalystThemePages: Boolean
}

input SurveyParameterInput {
    type: SurveyParameterType
    label: String
    value: String
    children: [SurveyParameterInput!]
}

input SurveyStaticTextInput {
    # the key of the text that is displayed in the frontend
    id: ID!
    textGroupId: ID!
    text: String!
}

input SurveyDiscussionQuestionInput {
    # might be null if adding a new question
    id: ID
    # should never be null or empty
    title: String!
    active: Boolean!
}

input SurveyCatalystInput {
    # Catalyst id, there should never be a null as we do not allow for creating catalysts now
    id: ID!
    # Catalyst title, should not be null if updating catalysts
    title: String
    description: String
    # Use when storing catalyst and drivers, otherwise should be null
    drivers: [SurveyDriverInput!]
    # Use when storing questions, otherise should be null
    questions: [LikertQuestionInput!]
    # Open question at the end of catalyst questions
    # if null it will be removed
    catalystQuestion: String
}

input SurveyDriverInput {
    # Driver id, there should never be a null as we do not allow for creating catalysts now
    id: ID!
    title: String!
    description: String
    prescription: String
    weight: Float!
}

input LikertQuestionInput {
    # Question Id, if null the question is created and generated id is returned
    id: ID
    title: String!
}

input QuestionDriverWeightInput {
    questionId: ID!
    driverId: ID!
    weight: Float!
}

input LikertQuestionAnswerInput {
    questionId: ID!
    # Selected index
    # Use 0 for skipping the question. Valid values 0, 1, 2, 3, 4, 5
    response: Int!
}

input LikertQuestionRateInput {
    questionId: ID!
    # Use for rateing -> "How important is this question to you?
    rate: Int
}

input CatalystOpenQuestionAnswerInput {
    catalystId: ID!
    # Free text
    # Set null for skipping the question
    response: String
    public: Boolean
}

input ParameterAnswerInput {
    parameterId: ID!
    value: ID!
}

# input for filtering respondents or statistics
input FilterInput {
    # Parameter id from the column header that is chosen for filtering (SurveyParameter.value field from root)
    id: ID!
    # Selected values or ids
    # for TREE and LIST parameter it should be selected children (SurveyParameter.value field from children)
    values: [String!]!
}

# input for sending invitations to respondents
input RespondentInvitationInput {
    subject: String!
    body: String!
    emails: [String!]!
    invitationLanguage: String
}

# input for sending invitations to respondents
input MailInvitationInput {
    subject: String!
    inviteAll: Boolean
    body: String!
    emails: [String!]!
    invitationLanguage: String
}

input SurveyMediaInput {
    id: ID
    title: String!
    # media details
    details: MediaDetailsInput!
}

input MediaUploadInput {
    fileName: String!
    mimeType: String!
}

input MediaParametersInput {
    width: Long
    height: Long
}

input MediaDetailsInput {
    key: String!
}

input DiscussionCommentInput {
    # Use null for creating a new comment, use existing id for updating comment
    commentId: ID
    # Must not be empty
    text: String!
}

input CustomerInput {
    id: ID
    name: String
    description: String!
    segmentId: Long
}

input AnswerInput {
    id: ID
    answerIndex: Int!
    questionId: Long!
}

input RespondentInput {
    id: ID
    name: String
    email: String
    age: Int
    position: Long
    industry: Long
    segment: Long
    phone: String
    gender: String
    country: String
    experience: Int
    consent: Boolean
    locale: String
}

input Filters {
    surveyId: String
    respondentName: String
    ageMin: Long
    ageMax: Long
    countries: [String]
    experienceMin: Long
    experienceMax: Long
    genders: [String]
    industryIds: [ID]
    positionIds: [ID]
    customerIds: [ID]
    respondentGroupIds: [ID]
    respondentIds: [ID]
    segmentIds: [ID]
}

